{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stork (pleroma-bot) \u00b6 Mirror your favorite Twitter accounts in the Fediverse, so you can follow their updates from the comfort of your favorite instance. Or migrate your own to the Fediverse using a Twitter archive . Get started Download AUR (Arch) You can find this project at: GitHub Gitlab Gitea pleroma-bot pleroma-bot pleroma-bot Supports: Mastodon Pleroma Misskey Features \u00b6 Can parse a Twitter archive , moving all your tweets to the Fediverse Retrieves latest tweets and posts them on the Fediverse account Can filter out RTs Can filter out replies Media retrieval and upload of multiple attachments Video Images Animated GIFs Polls Update Fediverse profile info based on the Twitter account Display name Profile picture Banner image Bio text Customize Fediverse account's metadata fields (e.g. point to the original Twitter account) Funding \u00b6 If you feel like supporting the creator or buying him a beer, you can donate through Ko-fi, Liberapay or Buy Me A Coffee: Type Address XMR 899StGytrpBSq6B9i7ca3iKb6pMM77VkcMxoTquAMJSPSq4HTJtavp5Qe4EFtmAuo74vYWDZ1qWnA2s6D8NZ19NZ8eaASBy BTC bc1qvwnv67gtslll65ya5pa93nqfnrvp4j8r9kdz5k ETH 0x16f48dc8b7df603da2888e7708f495091080df7d Issues \u00b6 Did you find a bug or do you have any suggestions? Please open an issue at GitHub's issue tracker . If for any reason you would rather not use GitHub, feel free to send an email to robertoszek@robertoszek.xyz and I'll try to check it out in a timely manner.","title":"Home"},{"location":"#stork-pleroma-bot","text":"Mirror your favorite Twitter accounts in the Fediverse, so you can follow their updates from the comfort of your favorite instance. Or migrate your own to the Fediverse using a Twitter archive . Get started Download AUR (Arch) You can find this project at: GitHub Gitlab Gitea pleroma-bot pleroma-bot pleroma-bot Supports: Mastodon Pleroma Misskey","title":"Stork (pleroma-bot)"},{"location":"#features","text":"Can parse a Twitter archive , moving all your tweets to the Fediverse Retrieves latest tweets and posts them on the Fediverse account Can filter out RTs Can filter out replies Media retrieval and upload of multiple attachments Video Images Animated GIFs Polls Update Fediverse profile info based on the Twitter account Display name Profile picture Banner image Bio text Customize Fediverse account's metadata fields (e.g. point to the original Twitter account)","title":"Features"},{"location":"#funding","text":"If you feel like supporting the creator or buying him a beer, you can donate through Ko-fi, Liberapay or Buy Me A Coffee: Type Address XMR 899StGytrpBSq6B9i7ca3iKb6pMM77VkcMxoTquAMJSPSq4HTJtavp5Qe4EFtmAuo74vYWDZ1qWnA2s6D8NZ19NZ8eaASBy BTC bc1qvwnv67gtslll65ya5pa93nqfnrvp4j8r9kdz5k ETH 0x16f48dc8b7df603da2888e7708f495091080df7d","title":"Funding"},{"location":"#issues","text":"Did you find a bug or do you have any suggestions? Please open an issue at GitHub's issue tracker . If for any reason you would rather not use GitHub, feel free to send an email to robertoszek@robertoszek.xyz and I'll try to check it out in a timely manner.","title":"Issues"},{"location":"contribute/contributing/","text":"Contributing \u00b6 Funding \u00b6 Type Address XMR 899StGytrpBSq6B9i7ca3iKb6pMM77VkcMxoTquAMJSPSq4HTJtavp5Qe4EFtmAuo74vYWDZ1qWnA2s6D8NZ19NZ8eaASBy BTC bc1qvwnv67gtslll65ya5pa93nqfnrvp4j8r9kdz5k ETH 0x16f48dc8b7df603da2888e7708f495091080df7d Code \u00b6 Patches, pull requests, and bug reports are more than welcome , please keep the style consistent with the original source. Translations \u00b6 We're looking for translators for other languages! You can get the PO template from here and create a translation with an editor such as Poedit . Language Status Translator en_US Complete robertoszek es_ES Complete robertoszek","title":"Contributing"},{"location":"contribute/contributing/#contributing","text":"","title":"Contributing"},{"location":"contribute/contributing/#funding","text":"Type Address XMR 899StGytrpBSq6B9i7ca3iKb6pMM77VkcMxoTquAMJSPSq4HTJtavp5Qe4EFtmAuo74vYWDZ1qWnA2s6D8NZ19NZ8eaASBy BTC bc1qvwnv67gtslll65ya5pa93nqfnrvp4j8r9kdz5k ETH 0x16f48dc8b7df603da2888e7708f495091080df7d","title":"Funding"},{"location":"contribute/contributing/#code","text":"Patches, pull requests, and bug reports are more than welcome , please keep the style consistent with the original source.","title":"Code"},{"location":"contribute/contributing/#translations","text":"We're looking for translators for other languages! You can get the PO template from here and create a translation with an editor such as Poedit . Language Status Translator en_US Complete robertoszek es_ES Complete robertoszek","title":"Translations"},{"location":"gettingstarted/automateit/","text":"Automate it \u00b6 Great, now you're all ready to go, you have installed pleroma-bot and created a config for your needs. But where's the fun in all of that if you have to run it manually everytime, right? Daemon mode \u00b6 pleroma-bot can run in the background by launching it in daemon mode: $ pleroma-bot -d By default, it will re-run every 60 minutes. You can override this behaviour with --pollrate or -p . This will run it every 15 minutes: $ pleroma-bot -d -p 15 Systemd service \u00b6 The AUR package will automatically install the systemd service pleroma-bot.service . If you installed pleroma-bot by other methods, you will have to manually install it: The pleroma-bot.service file can be found at the root of the code repository [Unit] Description = Stork (pleroma-bot) Documentation = https://robertoszek.github.io/pleroma-bot After = network.target [Service] Environment = PYTHONUNBUFFERED=1 # Uncomment this line if using venv # ExecStart=/path/to/venv/bin/pleroma-bot -d --config /etc/pleroma-bot/config.yml --log /var/log/pleroma-bot/error.log --skipChecks ExecStart = pleroma-bot -d --config /etc/pleroma-bot/config.yml --log /var/log/pleroma-bot/error.log --skipChecks If you're using a virtual environment you may have to edit the service file first System-level User-level $ sudo cp pleroma-bot.service /etc/systemd/system/pleroma-bot.service $ sudo systemctl daemon-reload $ sudo systemctl start pleroma-bot $ cp pleroma-bot.service ~/.config/systemd/user/pleroma-bot.service $ systemctl --user daemon-reload $ systemctl --user start pleroma-bot Skip first run checks \u00b6 It's worth noting that pleroma-bot accepts the flag --skipChecks , which will ignore all of the first run checks (e.g. no user folder found, no posts/toots in the target Fediverse account, etc). Most importantly, if you pass this argument you can rest assured no input will be asked during the run. Which makes it perfect for our purposes of running it on a timer with no manual intervention. $ pleroma-bot --skipChecks Run on a timer \u00b6 If you prefer not using the daemon mode, you can instead opt to run pleroma-bot on a timer of your choosing. Cron \u00b6 Fan favourite and well-known. If you have trouble figuring out cron schedule expressions, you can use this site to analyze them. First, start by editing your current crontab: $ crontab -e In our example, we'll add some lines at the end of the crontab, which will: Post new tweets (every 10 min.) Update profile info (everyday at 6:15 AM) Using PyPi Using AUR package Using Git Feel free to omit \" 1> /dev/null \" Its main use here is to drop any output from the standard output, in case you have configured cron to send you emails if any commands generate output System-wide Virtual environment # Post tweets every 10 min */10 * * * * pleroma-bot --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log 1 > /dev/null # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * pleroma-bot --skipChecks -c /path/to/config.yml 1 > /dev/null # Post tweets every 10 min */10 * * * * cd /path/to/your/venv/ && . bin/activate && pleroma-bot --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * cd /path/to/your/venv/ && . bin/activate && pleroma-bot --skipChecks -c /path/to/config.yml -l /path/to/error.log You can freely omit 1> /dev/null . Its main use here is to drop any output from the standard output, in case you have configured cron to send you emails if any commands generate output # Post tweets every 10 min */10 * * * * pleroma-bot --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * pleroma-bot --skipChecks -c /path/to/config.yml -l /path/to/error.log You can freely omit 1> /dev/null . Its main use here is to drop any output from the standard output, in case you have configured cron to send you emails if any commands generate output # Post tweets every 10 min */10 * * * * cd /path/to/cloned/repo/ && python3 -m pleroma_bot.cli --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * cd /path/to/cloned/repo/ && python3 -m pleroma_bot.cli --skipChecks -c /path/to/config.yml -l /path/to/error.log Systemd timers \u00b6 You can achieve the same results with Systemd timers . The choice of which one to use (cron or systemd timers) it's really up to you, basically whichever one fits more your needs. Create a service file with the following content: /etc/systemd/system/pleroma-bot@.service [ Unit ] Description = Bot that mirrors Twitter accounts on the Fediverse [ Service ] Type = oneshot ExecStart = /usr/bin/pleroma-bot --skipChecks -c /path/to/config.yml -l /path/to/error.log %i Also, create 2 timer files with the following content: /etc/systemd/system/pleroma-bot-tweets.timer [ Unit ] Description = Run pleroma-bot every 10min [ Timer ] Unit = pleroma-bot@.service OnCalendar = *:0/10 Persistent = true [ Install ] WantedBy = timers.target /etc/systemd/system/pleroma-bot-profile.timer [ Unit ] Description = Run pleroma-bot with noProfile at 6 :15am [ Timer ] Unit = pleroma-bot@noProfile.service OnCalendar = *-*-* 6 :15:00 Persistent = true [ Install ] WantedBy = timers.target Enable and start the timers: # systemctl enable pleroma-bot-profile.timer # systemctl --user start pleroma-bot-profile.timer # systemctl enable pleroma-bot-tweets.timer # systemctl --user start pleroma-bot-tweets.timer","title":"Automate it"},{"location":"gettingstarted/automateit/#automate-it","text":"Great, now you're all ready to go, you have installed pleroma-bot and created a config for your needs. But where's the fun in all of that if you have to run it manually everytime, right?","title":"Automate it"},{"location":"gettingstarted/automateit/#daemon-mode","text":"pleroma-bot can run in the background by launching it in daemon mode: $ pleroma-bot -d By default, it will re-run every 60 minutes. You can override this behaviour with --pollrate or -p . This will run it every 15 minutes: $ pleroma-bot -d -p 15","title":"Daemon mode"},{"location":"gettingstarted/automateit/#systemd-service","text":"The AUR package will automatically install the systemd service pleroma-bot.service . If you installed pleroma-bot by other methods, you will have to manually install it: The pleroma-bot.service file can be found at the root of the code repository [Unit] Description = Stork (pleroma-bot) Documentation = https://robertoszek.github.io/pleroma-bot After = network.target [Service] Environment = PYTHONUNBUFFERED=1 # Uncomment this line if using venv # ExecStart=/path/to/venv/bin/pleroma-bot -d --config /etc/pleroma-bot/config.yml --log /var/log/pleroma-bot/error.log --skipChecks ExecStart = pleroma-bot -d --config /etc/pleroma-bot/config.yml --log /var/log/pleroma-bot/error.log --skipChecks If you're using a virtual environment you may have to edit the service file first System-level User-level $ sudo cp pleroma-bot.service /etc/systemd/system/pleroma-bot.service $ sudo systemctl daemon-reload $ sudo systemctl start pleroma-bot $ cp pleroma-bot.service ~/.config/systemd/user/pleroma-bot.service $ systemctl --user daemon-reload $ systemctl --user start pleroma-bot","title":"Systemd service"},{"location":"gettingstarted/automateit/#skip-first-run-checks","text":"It's worth noting that pleroma-bot accepts the flag --skipChecks , which will ignore all of the first run checks (e.g. no user folder found, no posts/toots in the target Fediverse account, etc). Most importantly, if you pass this argument you can rest assured no input will be asked during the run. Which makes it perfect for our purposes of running it on a timer with no manual intervention. $ pleroma-bot --skipChecks","title":"Skip first run checks"},{"location":"gettingstarted/automateit/#run-on-a-timer","text":"If you prefer not using the daemon mode, you can instead opt to run pleroma-bot on a timer of your choosing.","title":"Run on a timer"},{"location":"gettingstarted/automateit/#cron","text":"Fan favourite and well-known. If you have trouble figuring out cron schedule expressions, you can use this site to analyze them. First, start by editing your current crontab: $ crontab -e In our example, we'll add some lines at the end of the crontab, which will: Post new tweets (every 10 min.) Update profile info (everyday at 6:15 AM) Using PyPi Using AUR package Using Git Feel free to omit \" 1> /dev/null \" Its main use here is to drop any output from the standard output, in case you have configured cron to send you emails if any commands generate output System-wide Virtual environment # Post tweets every 10 min */10 * * * * pleroma-bot --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log 1 > /dev/null # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * pleroma-bot --skipChecks -c /path/to/config.yml 1 > /dev/null # Post tweets every 10 min */10 * * * * cd /path/to/your/venv/ && . bin/activate && pleroma-bot --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * cd /path/to/your/venv/ && . bin/activate && pleroma-bot --skipChecks -c /path/to/config.yml -l /path/to/error.log You can freely omit 1> /dev/null . Its main use here is to drop any output from the standard output, in case you have configured cron to send you emails if any commands generate output # Post tweets every 10 min */10 * * * * pleroma-bot --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * pleroma-bot --skipChecks -c /path/to/config.yml -l /path/to/error.log You can freely omit 1> /dev/null . Its main use here is to drop any output from the standard output, in case you have configured cron to send you emails if any commands generate output # Post tweets every 10 min */10 * * * * cd /path/to/cloned/repo/ && python3 -m pleroma_bot.cli --noProfile --skipChecks -c /path/to/config.yml -l /path/to/error.log # Update pleroma profile with Twitter info every day at 6:15 AM 15 6 * * * cd /path/to/cloned/repo/ && python3 -m pleroma_bot.cli --skipChecks -c /path/to/config.yml -l /path/to/error.log","title":"Cron"},{"location":"gettingstarted/automateit/#systemd-timers","text":"You can achieve the same results with Systemd timers . The choice of which one to use (cron or systemd timers) it's really up to you, basically whichever one fits more your needs. Create a service file with the following content: /etc/systemd/system/pleroma-bot@.service [ Unit ] Description = Bot that mirrors Twitter accounts on the Fediverse [ Service ] Type = oneshot ExecStart = /usr/bin/pleroma-bot --skipChecks -c /path/to/config.yml -l /path/to/error.log %i Also, create 2 timer files with the following content: /etc/systemd/system/pleroma-bot-tweets.timer [ Unit ] Description = Run pleroma-bot every 10min [ Timer ] Unit = pleroma-bot@.service OnCalendar = *:0/10 Persistent = true [ Install ] WantedBy = timers.target /etc/systemd/system/pleroma-bot-profile.timer [ Unit ] Description = Run pleroma-bot with noProfile at 6 :15am [ Timer ] Unit = pleroma-bot@noProfile.service OnCalendar = *-*-* 6 :15:00 Persistent = true [ Install ] WantedBy = timers.target Enable and start the timers: # systemctl enable pleroma-bot-profile.timer # systemctl --user start pleroma-bot-profile.timer # systemctl enable pleroma-bot-tweets.timer # systemctl --user start pleroma-bot-tweets.timer","title":"Systemd timers"},{"location":"gettingstarted/beforerunning/","text":"Before running \u00b6 If you haven't already, you need to apply for a Twitter developer account . The process involves some review of the developer account application by Twitter and it's very likely you'll be asked for some details pertaining your usecase. It usually doesn't take longer than a day or two to complete the application, the back and forth is mostly automated on their part. Additionally, Twitter introduced a new tier of access ( Elevated ) to their API projects and although existing projects (before Nov 2021) were promoted automatically, new users will only get Essential access instead by default, in which requests to API v1.1 are disabled. We still use v1.1 for downloading videos and profile banners, and as of now there is no available alternative in v2. So, you'll need Elevated access for the bot to function properly until further notice. You can apply for Elevated access here . Twitter tokens \u00b6 Once you have a Twitter developer account, you need to access your dashboard and create a new project (so your app has v2 access) and also create a new app associated to that new project. Now, enter your new application \"Keys and tokens\" section, copy and safely store all of your tokens. The Bearer Token is usually enough for most usecases when running pleroma-bot However, if you plan on retrieving tweets from an account with protected tweets, you'll also need the following: Keep in mind your Twitter developer account needs to follow or be the owner of the protected account for this to work Consumer Key and Secret (or API key & secret) Access Token Key and Secret Alternatively, you can obtain the Access Token and Secret by running this locally, while being logged in with a Twitter account which follows or is the owner of the protected account. Fediverse tokens \u00b6 You also need to obtain the bearer tokens for the Fediverse account(s) you plan to use for mirroring. Mastodon Misskey Pleroma If you're using Mastodon, you can obtain a token by using the Web interface and navigating to Settings -> Development : * Scopes: read write Save (and safely store) the value of the token generated for that Fediverse account, you'll need it in the next section. If you're using Misskey you can obtain a token using the Web interface and navigating to Settings -> API : Scopes: View your account information Edit your account information Access your Drive files and folders Edit or delete your Drive files and folders Compose or delete notes Save (and safely store) the value of the token generated for that Fediverse account, you'll need it in the next section. If you cannot get the token by using the Web interface (like in Pleroma instances), the alternative is to follow the instructions on this site while being logged in as the Fediverse account, and enter: Your server/instance URL ( without the protocol at the beginning, e.g. https:// ) The name of your app (doesn't really matter which one you choose, it's just a meaningful name so it's easy for you to identify) Scopes: read write When you're done with the last step (as in, running the cURL command): $ curl -F grant_type = authorization_code \\ -F redirect_uri = urn:ietf:wg:oauth:2.0:oob \\ -F client_id = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\ -F client_secret = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\ -F code = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\ -X POST https://yourinstance.fedi/oauth/token You'll get a response similar to this: { \"access_token\" : \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" , \"created_at\" : 99999999 , \"expires_in\" : 99999 , \"me\" : \"https://yourinstance.fedi/users/yourfediuser\" , \"refresh_token\" : \"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\" , \"scope\" : \"read write\" , \"token_type\" : \"Bearer\" } Save the value of access_token . That is the bearer token generated for that Fediverse account, you'll need it in the next section.","title":"Before running"},{"location":"gettingstarted/beforerunning/#before-running","text":"If you haven't already, you need to apply for a Twitter developer account . The process involves some review of the developer account application by Twitter and it's very likely you'll be asked for some details pertaining your usecase. It usually doesn't take longer than a day or two to complete the application, the back and forth is mostly automated on their part. Additionally, Twitter introduced a new tier of access ( Elevated ) to their API projects and although existing projects (before Nov 2021) were promoted automatically, new users will only get Essential access instead by default, in which requests to API v1.1 are disabled. We still use v1.1 for downloading videos and profile banners, and as of now there is no available alternative in v2. So, you'll need Elevated access for the bot to function properly until further notice. You can apply for Elevated access here .","title":"Before running"},{"location":"gettingstarted/beforerunning/#twitter-tokens","text":"Once you have a Twitter developer account, you need to access your dashboard and create a new project (so your app has v2 access) and also create a new app associated to that new project. Now, enter your new application \"Keys and tokens\" section, copy and safely store all of your tokens. The Bearer Token is usually enough for most usecases when running pleroma-bot However, if you plan on retrieving tweets from an account with protected tweets, you'll also need the following: Keep in mind your Twitter developer account needs to follow or be the owner of the protected account for this to work Consumer Key and Secret (or API key & secret) Access Token Key and Secret Alternatively, you can obtain the Access Token and Secret by running this locally, while being logged in with a Twitter account which follows or is the owner of the protected account.","title":"Twitter tokens"},{"location":"gettingstarted/beforerunning/#fediverse-tokens","text":"You also need to obtain the bearer tokens for the Fediverse account(s) you plan to use for mirroring. Mastodon Misskey Pleroma If you're using Mastodon, you can obtain a token by using the Web interface and navigating to Settings -> Development : * Scopes: read write Save (and safely store) the value of the token generated for that Fediverse account, you'll need it in the next section. If you're using Misskey you can obtain a token using the Web interface and navigating to Settings -> API : Scopes: View your account information Edit your account information Access your Drive files and folders Edit or delete your Drive files and folders Compose or delete notes Save (and safely store) the value of the token generated for that Fediverse account, you'll need it in the next section. If you cannot get the token by using the Web interface (like in Pleroma instances), the alternative is to follow the instructions on this site while being logged in as the Fediverse account, and enter: Your server/instance URL ( without the protocol at the beginning, e.g. https:// ) The name of your app (doesn't really matter which one you choose, it's just a meaningful name so it's easy for you to identify) Scopes: read write When you're done with the last step (as in, running the cURL command): $ curl -F grant_type = authorization_code \\ -F redirect_uri = urn:ietf:wg:oauth:2.0:oob \\ -F client_id = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\ -F client_secret = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\ -F code = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \\ -X POST https://yourinstance.fedi/oauth/token You'll get a response similar to this: { \"access_token\" : \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" , \"created_at\" : 99999999 , \"expires_in\" : 99999 , \"me\" : \"https://yourinstance.fedi/users/yourfediuser\" , \"refresh_token\" : \"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\" , \"scope\" : \"read write\" , \"token_type\" : \"Bearer\" } Save the value of access_token . That is the bearer token generated for that Fediverse account, you'll need it in the next section.","title":"Fediverse tokens"},{"location":"gettingstarted/configuration/","text":"Configuration \u00b6 To run pleroma-bot you need to create a configuration file first. The configuration file is written in YAML . If you're not familiar with it, this page can run you through the basics. In the config file there are 2 distinct parts, the mappings at the top and a collection of users (each of them being a sequence of mappings). global_mapping : global_value users : - user_mapping : user_value You can think of \"users\" as a YAML list , in which each entry of the list is denoted by a hyphen/dash ( - ). This allows you to add as little as 1 user and as much as you need, there's no upper limit to the number of users you can add. The mappings outside the user sequences, are considered \" global \" mappings and will be applied to all users. So if you define the value for pleroma_base_url at the top, it will apply to all users in your config: pleroma_base_url : https://pleroma.instance users : - twitter_username : User1 pleroma_username : MyPleromaUser1 - twitter_username : User2 pleroma_username : MyPleromaUser2 In this example, User1 and User2 share the configured value of pleroma_base_url at the top ( https://pleroma.instance ). You can also override the \"global\" mapping within an user if you so choose: pleroma_base_url : https://pleroma.instance users : - twitter_username : User1 pleroma_username : MyPleromaUser1 - twitter_username : User2 pleroma_username : MyPleromaUser2 pleroma_base_url : https://another.instance - twitter_username : User3 pleroma_username : MyPleromaUser3 Here, User1 and User3 share the configured value of pleroma_base_url at the top but User2 's pleroma_base_url value would be https://another.instance . Mappings \u00b6 Every mapping that pleroma-bot understands is listed below with a description, which allows you to further customize how each user should behave. Mapping Optional Default Description pleroma_base_url No Your Fediverse instance URL max_tweets No How many tweets to get in every execution (Twitter's API hard limit is 3,200) twitter_token No Twitter bearer token used for authentication consumer_key Yes OAuth 1.0a Twitter Consumer Key (only needed for protected accounts) consumer_secret Yes OAuth 1.0a Twitter Consumer Secret (only needed for protected accounts) access_token_key Yes OAuth 1.0a Twitter Access Token Key (only needed for protected accounts) access_token_secret Yes OAuth 1.0a Twitter Access Token Secret (only needed for protected accounts) no_profile Yes false If set to true, the profile picture, banner, display name and bio will not be updated on the Fediverse account nitter Yes false If Twitter links should be changed to nitter ones nitter_base_url Yes https://nitter.net Change this to your preferred nitter instance signature Yes false Add a link to the original status media_upload Yes true Download Twitter attachments and add them to the Fediverse posts rich_text Yes false Transform mentions to links pointing to the mentioned Twitter profile include_rts Yes true Include RTs when posting tweets in the Fediverse account include_replies Yes true Include replies when posting tweets in the Fediverse account include_quotes Yes true Include quoted tweets when posting tweets in the Fediverse account hashtags Yes List of hashtags to use to filter out tweets which don't include any of them visibility Yes unlisted Visibility of the post. Must one of the following: public, unlisted, private, direct sensitive Yes original tweet sensitivity Force all posts to be sensitive (NSFW) or not file_max_size Yes How big attachments can be before being ignored. Examples: \"30MB\", \"1.5GB\", \"0.5TB\" delay_post Yes 0.5 How long to wait (in seconds) between submitting posts to the Fedi instance (useful when trying to avoid rate limits) tweet_ids Yes List of specific tweet IDs to retrieve and post twitter_bio Yes true Append Twitter's bio to Pleroma/Mastodon target user original_date Yes false Include the creation date of the tweet on the Fediverse post body original_date_format Yes \"%Y-%m-%d %H:%M\" Date format to use when adding the creation date of the tweet to the Fediverse post keep_media_links Yes false Keep redundant media links on the tweet text or not ( https://twitter.com/<display_name>/status/<tweet_id>/photo/1 ) invidious Yes false If Youtube links should be replaced with invidious ones invidious_base_url Yes https://yewtu.be Change this to your preferred invidious instance There a few mappings exclusive to users: User mapping Optional Default Description twitter_username No Username of Twitter account to mirror (can be a list) pleroma_username No Username of target Fediverse account to post content and update profile pleroma_token No Bearer token of target Fediverse account bio_text Yes Text to be appended to the Twitter account bio text fields Yes Optional metadata fields (sequence of name-value pairs) for the Fediverse profile And mappings that can only be used globally : Global mapping Optional Default Description random_user_order Yes false Randomize the order of processing users on your config Example configs \u00b6 So, with that preamble out of the way. A minimal config looks something like this: Minimal config \u00b6 Pleroma Mastodon Misskey config-minimal.yml.sample pleroma_base_url : https://pleroma.instance max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX users : - twitter_username : User1 pleroma_username : MyPleromaUser1 pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX config-minimal.yml.sample pleroma_base_url : https://mastodon.instance max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX users : - twitter_username : User1 pleroma_username : 24660 # Account ID # Mastodon Bearer token pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX config-minimal.yml.sample pleroma_base_url : https://misskey.instance max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX users : - twitter_username : User1 pleroma_username : MyMisskeyUser1 # Misskey bearer token pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Complex config \u00b6 Here's also a more full-fledged config file sample, with 3 users ( KyleBosman , WoolieWoolz and arstechnica ), which puts all the concepts we've seen together: config.yml.sample pleroma_base_url : https://pleroma.robertoszek.xyz nitter_base_url : https://nitter.net max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # List of users and their attributes users : - twitter_username : KyleBosman pleroma_username : KyleBosman pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # (optional) keys and secrets for using OAuth 1.0a (for protected accounts) consumer_key : xxxxxxxxxxxxxxxxxxxxxxxxx consumer_secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx access_token_key : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx access_token_secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx signature : true media_upload : true nitter : true rich_text : true visibility : \"unlisted\" sensitive : false original_date : true original_date_format : \"%Y/%m/%d %H:%M\" include_rts : false include_replies : false hashtags : - sponsored file_max_size : 500MB # additional custom-named mappings support_account : robertoszek # you can use any mapping from 'user' inside a string with {{ mapping_name }} # and it will be replaced with the mapping value. e.g. {{ support_account }} bio_text : \" \\U0001F916 BEEP BOOP \\U0001F916 \\nI'm a bot that mirrors\\ \\ {{ twitter_username }} Twitter's account. \\nAny issues please \\ \\ contact @{{ support_account }} \\n \\n \" # Optional metadata fields and values for the Fediverse profile fields : - name : \" \\U0001F426 Birdsite\" value : \"{{ twitter_url }}\" - name : \"Status\" value : \"I am afraid I cannot do that.\" - name : \"Source\" value : \"https://gitea.robertoszek.xyz/robertoszek/pleroma-bot\" - name : \"WWW\" value : \"{{ website }}\" # Website defined in Twitter profile # Mastodon instance example - twitter_username : WoolieWoolz pleroma_username : 24660 pleroma_base_url : https://botsin.space pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # Mastodon doesn't support rich text! rich_text : false signature : true nitter : true visibility : \"unlisted\" media_upload : true max_tweets : 50 bio_text : \" \\U0001F916 BEEP BOOP \\U0001F916 \\nI'm a bot that mirrors\\ \\ {{ twitter_username }} Twitter's account. \\nAny issues please \\ \\ contact @{{ support_account }} \\n \\n \" fields : - name : \" \\U0001F426 Birdsite\" value : \"{{ twitter_url }}\" - name : \"Status\" value : \"I am completely operational.\" - name : \"Source\" value : \"https://gitea.robertoszek.xyz/robertoszek/pleroma-bot\" # Minimal config example - twitter_username : arstechnica pleroma_username : mynewsbot pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX bio_text : \"\" Mastodon \u00b6 If you use pleroma-bot with a Mastodon instance, please do take into account that you'll need to fill the pleroma_username mapping with your Mastodon account ID, not the username or nickname. # Mastodon instance example - twitter_username : WoolieWoolz pleroma_username : 24660 # <-- pleroma_base_url : https://botsin.space pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX [ ... ] The ease of finding the ID for your Mastodon account varies between instances, sometimes it's as easy as to navigate to your profile and copy it from the URL. You can try searching for it this way: curl 'https://yourmastodon.instance/api/v2/search?q=<username>&resolve=true&limit=5' -H 'Authorization: Bearer xxxxx' If you are an admin or a moderator of the instance (or can get one to do it for you) you can also go to Preferences -> Moderation -> Accounts and find your account. After opening the account details, the URL will reveal the ID of the user.","title":"Configuration"},{"location":"gettingstarted/configuration/#configuration","text":"To run pleroma-bot you need to create a configuration file first. The configuration file is written in YAML . If you're not familiar with it, this page can run you through the basics. In the config file there are 2 distinct parts, the mappings at the top and a collection of users (each of them being a sequence of mappings). global_mapping : global_value users : - user_mapping : user_value You can think of \"users\" as a YAML list , in which each entry of the list is denoted by a hyphen/dash ( - ). This allows you to add as little as 1 user and as much as you need, there's no upper limit to the number of users you can add. The mappings outside the user sequences, are considered \" global \" mappings and will be applied to all users. So if you define the value for pleroma_base_url at the top, it will apply to all users in your config: pleroma_base_url : https://pleroma.instance users : - twitter_username : User1 pleroma_username : MyPleromaUser1 - twitter_username : User2 pleroma_username : MyPleromaUser2 In this example, User1 and User2 share the configured value of pleroma_base_url at the top ( https://pleroma.instance ). You can also override the \"global\" mapping within an user if you so choose: pleroma_base_url : https://pleroma.instance users : - twitter_username : User1 pleroma_username : MyPleromaUser1 - twitter_username : User2 pleroma_username : MyPleromaUser2 pleroma_base_url : https://another.instance - twitter_username : User3 pleroma_username : MyPleromaUser3 Here, User1 and User3 share the configured value of pleroma_base_url at the top but User2 's pleroma_base_url value would be https://another.instance .","title":"Configuration"},{"location":"gettingstarted/configuration/#mappings","text":"Every mapping that pleroma-bot understands is listed below with a description, which allows you to further customize how each user should behave. Mapping Optional Default Description pleroma_base_url No Your Fediverse instance URL max_tweets No How many tweets to get in every execution (Twitter's API hard limit is 3,200) twitter_token No Twitter bearer token used for authentication consumer_key Yes OAuth 1.0a Twitter Consumer Key (only needed for protected accounts) consumer_secret Yes OAuth 1.0a Twitter Consumer Secret (only needed for protected accounts) access_token_key Yes OAuth 1.0a Twitter Access Token Key (only needed for protected accounts) access_token_secret Yes OAuth 1.0a Twitter Access Token Secret (only needed for protected accounts) no_profile Yes false If set to true, the profile picture, banner, display name and bio will not be updated on the Fediverse account nitter Yes false If Twitter links should be changed to nitter ones nitter_base_url Yes https://nitter.net Change this to your preferred nitter instance signature Yes false Add a link to the original status media_upload Yes true Download Twitter attachments and add them to the Fediverse posts rich_text Yes false Transform mentions to links pointing to the mentioned Twitter profile include_rts Yes true Include RTs when posting tweets in the Fediverse account include_replies Yes true Include replies when posting tweets in the Fediverse account include_quotes Yes true Include quoted tweets when posting tweets in the Fediverse account hashtags Yes List of hashtags to use to filter out tweets which don't include any of them visibility Yes unlisted Visibility of the post. Must one of the following: public, unlisted, private, direct sensitive Yes original tweet sensitivity Force all posts to be sensitive (NSFW) or not file_max_size Yes How big attachments can be before being ignored. Examples: \"30MB\", \"1.5GB\", \"0.5TB\" delay_post Yes 0.5 How long to wait (in seconds) between submitting posts to the Fedi instance (useful when trying to avoid rate limits) tweet_ids Yes List of specific tweet IDs to retrieve and post twitter_bio Yes true Append Twitter's bio to Pleroma/Mastodon target user original_date Yes false Include the creation date of the tweet on the Fediverse post body original_date_format Yes \"%Y-%m-%d %H:%M\" Date format to use when adding the creation date of the tweet to the Fediverse post keep_media_links Yes false Keep redundant media links on the tweet text or not ( https://twitter.com/<display_name>/status/<tweet_id>/photo/1 ) invidious Yes false If Youtube links should be replaced with invidious ones invidious_base_url Yes https://yewtu.be Change this to your preferred invidious instance There a few mappings exclusive to users: User mapping Optional Default Description twitter_username No Username of Twitter account to mirror (can be a list) pleroma_username No Username of target Fediverse account to post content and update profile pleroma_token No Bearer token of target Fediverse account bio_text Yes Text to be appended to the Twitter account bio text fields Yes Optional metadata fields (sequence of name-value pairs) for the Fediverse profile And mappings that can only be used globally : Global mapping Optional Default Description random_user_order Yes false Randomize the order of processing users on your config","title":"Mappings"},{"location":"gettingstarted/configuration/#example-configs","text":"So, with that preamble out of the way. A minimal config looks something like this:","title":"Example configs"},{"location":"gettingstarted/configuration/#minimal-config","text":"Pleroma Mastodon Misskey config-minimal.yml.sample pleroma_base_url : https://pleroma.instance max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX users : - twitter_username : User1 pleroma_username : MyPleromaUser1 pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX config-minimal.yml.sample pleroma_base_url : https://mastodon.instance max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX users : - twitter_username : User1 pleroma_username : 24660 # Account ID # Mastodon Bearer token pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX config-minimal.yml.sample pleroma_base_url : https://misskey.instance max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX users : - twitter_username : User1 pleroma_username : MyMisskeyUser1 # Misskey bearer token pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","title":"Minimal config"},{"location":"gettingstarted/configuration/#complex-config","text":"Here's also a more full-fledged config file sample, with 3 users ( KyleBosman , WoolieWoolz and arstechnica ), which puts all the concepts we've seen together: config.yml.sample pleroma_base_url : https://pleroma.robertoszek.xyz nitter_base_url : https://nitter.net max_tweets : 40 twitter_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # List of users and their attributes users : - twitter_username : KyleBosman pleroma_username : KyleBosman pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # (optional) keys and secrets for using OAuth 1.0a (for protected accounts) consumer_key : xxxxxxxxxxxxxxxxxxxxxxxxx consumer_secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx access_token_key : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx access_token_secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx signature : true media_upload : true nitter : true rich_text : true visibility : \"unlisted\" sensitive : false original_date : true original_date_format : \"%Y/%m/%d %H:%M\" include_rts : false include_replies : false hashtags : - sponsored file_max_size : 500MB # additional custom-named mappings support_account : robertoszek # you can use any mapping from 'user' inside a string with {{ mapping_name }} # and it will be replaced with the mapping value. e.g. {{ support_account }} bio_text : \" \\U0001F916 BEEP BOOP \\U0001F916 \\nI'm a bot that mirrors\\ \\ {{ twitter_username }} Twitter's account. \\nAny issues please \\ \\ contact @{{ support_account }} \\n \\n \" # Optional metadata fields and values for the Fediverse profile fields : - name : \" \\U0001F426 Birdsite\" value : \"{{ twitter_url }}\" - name : \"Status\" value : \"I am afraid I cannot do that.\" - name : \"Source\" value : \"https://gitea.robertoszek.xyz/robertoszek/pleroma-bot\" - name : \"WWW\" value : \"{{ website }}\" # Website defined in Twitter profile # Mastodon instance example - twitter_username : WoolieWoolz pleroma_username : 24660 pleroma_base_url : https://botsin.space pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # Mastodon doesn't support rich text! rich_text : false signature : true nitter : true visibility : \"unlisted\" media_upload : true max_tweets : 50 bio_text : \" \\U0001F916 BEEP BOOP \\U0001F916 \\nI'm a bot that mirrors\\ \\ {{ twitter_username }} Twitter's account. \\nAny issues please \\ \\ contact @{{ support_account }} \\n \\n \" fields : - name : \" \\U0001F426 Birdsite\" value : \"{{ twitter_url }}\" - name : \"Status\" value : \"I am completely operational.\" - name : \"Source\" value : \"https://gitea.robertoszek.xyz/robertoszek/pleroma-bot\" # Minimal config example - twitter_username : arstechnica pleroma_username : mynewsbot pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX bio_text : \"\"","title":"Complex config"},{"location":"gettingstarted/configuration/#mastodon","text":"If you use pleroma-bot with a Mastodon instance, please do take into account that you'll need to fill the pleroma_username mapping with your Mastodon account ID, not the username or nickname. # Mastodon instance example - twitter_username : WoolieWoolz pleroma_username : 24660 # <-- pleroma_base_url : https://botsin.space pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX [ ... ] The ease of finding the ID for your Mastodon account varies between instances, sometimes it's as easy as to navigate to your profile and copy it from the URL. You can try searching for it this way: curl 'https://yourmastodon.instance/api/v2/search?q=<username>&resolve=true&limit=5' -H 'Authorization: Bearer xxxxx' If you are an admin or a moderator of the instance (or can get one to do it for you) you can also go to Preferences -> Moderation -> Accounts and find your account. After opening the account details, the URL will reveal the ID of the user.","title":" Mastodon"},{"location":"gettingstarted/installation/","text":"Installation method \u00b6 First you need to install pleroma-bot on your system. There are multiple methods available: Using PyPi Using AUR package Using Git System-wide: $ pip install pleroma-bot Or in a virtual environment : $ python3 -m venv myvenv $ source myvenv/bin/activate (myenv) $ pip install pleroma-bot $ yay -S python-pleroma-bot $ git clone https://github.com/robertoszek/pleroma-bot.git $ cd pleroma-bot/ If you choose to use Git, note that you will also need to install the needed dependecies manually On the other hand, if you use pip or the AUR package, all dependencies will be installed automatically with no manual intervention required Either way, here's a list of the dependencies in case you need them: Name Git repo Docs python-oauthlib GitHub Documentation python-pyaml GitHub Documentation python-requests GitHub Documentation python-requests-oauthlib GitHub Documentation Test the installation \u00b6 Once installed using your preferred method, test that the package has been correctly installed using the appropiate command. Using PyPi Using AUR package Using Git $ pleroma-bot -h `^y6gB@@BBQA{, :fB@@@@@@BBBBBQgU\" `f@@@@@@@@BBBBQgg80H~ H@@B@BB@BBBB#Qgg&0RNT z@@&B@BBBBBBQgg80RD6HK ;@@@QB@BBBB#Qgg&0RN6WqS q@@@@@BBBBQgg80RN6HAqSo _ _ z@@@@BBBB#Qg8&0RN6WqSUhr | | | | -H@@@@BBBBQQg80RD6HAqSKh( ___| |_ ___ _ __| | __ rB@@@BBBB#6Lm00DN6WqSUhfv / __| __/ _ \\| '__| |/ / f@@@@BBBBf= |0RD6HAqSKhfv \\__ \\ || (_) | | | < =g@@@BBBBF= \"RDN6WqSUhff{ |___/\\__\\___/|_| |_|\\_| c@@@@BBgu_ ~WD9HAqSKhfkl` _6@@@BBNr 'qN6WqSUhhfXI' . . . rB@@@B0r `S6HAqSKhfkoCr ,-. | ,-. ,-. ,-. ,-,-. ,-. |-. ,-. |- `X@@@BQx `I6WASShhfXFIy_ | | | |-' | | | | | | ,-| -- | | | | | _g@@@Q\\` JHAqSKhfXoCwJz_ |-' `' `-' ' `-' ' ' ' `-^ `-' `-' `' rB@@#x` }WASShhfXsIyzuu, | `y@@&| .IAqSKhfXoCwJzu1lr ' `D@&| :KqSUhffXsIyzuu1llc, ff= `==:::\"\"\",,,,________ usage: pleroma-bot [-h] [-c CONFIG] [-d] [-p POLLRATE] [-l LOG] [-n] [--forceDate [FORCEDATE]] [-s] [-a ARCHIVE] [--verbose] [--version] Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon. optional arguments: -h, --help show this help message and exit -c CONFIG, --config CONFIG path of config file (config.yml) to use and parse. If not specified, it will try to find it in the current working directory. -d, --daemon run in daemon mode. By default it will re-run every 60min. You can control this with --pollrate -p POLLRATE, --pollrate POLLRATE only applies to daemon mode. How often to run the program in the background (in minutes). By default is 60min. -l LOG, --log LOG path of log file (error.log) to create. If not specified, it will try to store it at your config file path -n, --noProfile skips Fediverse profile update (no background image, profile image, bio text, etc.) --forceDate [FORCEDATE] forces the tweet retrieval to start from a specific date. The twitter_username value (FORCEDATE) can be supplied to only force it for that particular user in the config -s, --skipChecks skips first run checks -a ARCHIVE, --archive ARCHIVE path of the Twitter archive file (zip) to use for posting tweets. --verbose, -v --version show program's version number and exit $ pleroma-bot -h `^y6gB@@BBQA{, :fB@@@@@@BBBBBQgU\" `f@@@@@@@@BBBBQgg80H~ H@@B@BB@BBBB#Qgg&0RNT z@@&B@BBBBBBQgg80RD6HK ;@@@QB@BBBB#Qgg&0RN6WqS q@@@@@BBBBQgg80RN6HAqSo _ _ z@@@@BBBB#Qg8&0RN6WqSUhr | | | | -H@@@@BBBBQQg80RD6HAqSKh( ___| |_ ___ _ __| | __ rB@@@BBBB#6Lm00DN6WqSUhfv / __| __/ _ \\| '__| |/ / f@@@@BBBBf= |0RD6HAqSKhfv \\__ \\ || (_) | | | < =g@@@BBBBF= \"RDN6WqSUhff{ |___/\\__\\___/|_| |_|\\_| c@@@@BBgu_ ~WD9HAqSKhfkl` _6@@@BBNr 'qN6WqSUhhfXI' . . . rB@@@B0r `S6HAqSKhfkoCr ,-. | ,-. ,-. ,-. ,-,-. ,-. |-. ,-. |- `X@@@BQx `I6WASShhfXFIy_ | | | |-' | | | | | | ,-| -- | | | | | _g@@@Q\\` JHAqSKhfXoCwJz_ |-' `' `-' ' `-' ' ' ' `-^ `-' `-' `' rB@@#x` }WASShhfXsIyzuu, | `y@@&| .IAqSKhfXoCwJzu1lr ' `D@&| :KqSUhffXsIyzuu1llc, ff= `==:::\"\"\",,,,________ usage: pleroma-bot [-h] [-c CONFIG] [-d] [-p POLLRATE] [-l LOG] [-n] [--forceDate [FORCEDATE]] [-s] [-a ARCHIVE] [--verbose] [--version] Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon. optional arguments: -h, --help show this help message and exit -c CONFIG, --config CONFIG path of config file (config.yml) to use and parse. If not specified, it will try to find it in the current working directory. -d, --daemon run in daemon mode. By default it will re-run every 60min. You can control this with --pollrate -p POLLRATE, --pollrate POLLRATE only applies to daemon mode. How often to run the program in the background (in minutes). By default is 60min. -l LOG, --log LOG path of log file (error.log) to create. If not specified, it will try to store it at your config file path -n, --noProfile skips Fediverse profile update (no background image, profile image, bio text, etc.) --forceDate [FORCEDATE] forces the tweet retrieval to start from a specific date. The twitter_username value (FORCEDATE) can be supplied to only force it for that particular user in the config -s, --skipChecks skips first run checks -a ARCHIVE, --archive ARCHIVE path of the Twitter archive file (zip) to use for posting tweets. --verbose, -v --version show program's version number and exit $ python3 -m pleroma_bot.cli -h `^y6gB@@BBQA{, :fB@@@@@@BBBBBQgU\" `f@@@@@@@@BBBBQgg80H~ H@@B@BB@BBBB#Qgg&0RNT z@@&B@BBBBBBQgg80RD6HK ;@@@QB@BBBB#Qgg&0RN6WqS q@@@@@BBBBQgg80RN6HAqSo _ _ z@@@@BBBB#Qg8&0RN6WqSUhr | | | | -H@@@@BBBBQQg80RD6HAqSKh( ___| |_ ___ _ __| | __ rB@@@BBBB#6Lm00DN6WqSUhfv / __| __/ _ \\| '__| |/ / f@@@@BBBBf= |0RD6HAqSKhfv \\__ \\ || (_) | | | < =g@@@BBBBF= \"RDN6WqSUhff{ |___/\\__\\___/|_| |_|\\_| c@@@@BBgu_ ~WD9HAqSKhfkl` _6@@@BBNr 'qN6WqSUhhfXI' . . . rB@@@B0r `S6HAqSKhfkoCr ,-. | ,-. ,-. ,-. ,-,-. ,-. |-. ,-. |- `X@@@BQx `I6WASShhfXFIy_ | | | |-' | | | | | | ,-| -- | | | | | _g@@@Q\\` JHAqSKhfXoCwJz_ |-' `' `-' ' `-' ' ' ' `-^ `-' `-' `' rB@@#x` }WASShhfXsIyzuu, | `y@@&| .IAqSKhfXoCwJzu1lr ' `D@&| :KqSUhffXsIyzuu1llc, ff= `==:::\"\"\",,,,________ usage: cli.py [-h] [-c CONFIG] [-l LOG] [-n] [--forceDate [FORCEDATE]] [-s] [-a ARCHIVE] [--verbose] [--version] Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon. optional arguments: -h, --help show this help message and exit -c CONFIG, --config CONFIG path of config file (config.yml) to use and parse. If not specified, it will try to find it in the current working directory. -d, --daemon run in daemon mode. By default it will re-run every 60min. You can control this with --pollrate -p POLLRATE, --pollrate POLLRATE only applies to daemon mode. How often to run the program in the background (in minutes). By default is 60min. -l LOG, --log LOG path of log file (error.log) to create. If not specified, it will try to store it at your config file path -n, --noProfile skips Fediverse profile update (no background image, profile image, bio text, etc.) --forceDate [FORCEDATE] forces the tweet retrieval to start from a specific date. The twitter_username value (FORCEDATE) can be supplied to only force it for that particular user in the config -s, --skipChecks skips first run checks -a ARCHIVE, --archive ARCHIVE path of the Twitter archive file (zip) to use for posting tweets. --verbose, -v --version show program's version number and exit","title":"Installation"},{"location":"gettingstarted/installation/#installation-method","text":"First you need to install pleroma-bot on your system. There are multiple methods available: Using PyPi Using AUR package Using Git System-wide: $ pip install pleroma-bot Or in a virtual environment : $ python3 -m venv myvenv $ source myvenv/bin/activate (myenv) $ pip install pleroma-bot $ yay -S python-pleroma-bot $ git clone https://github.com/robertoszek/pleroma-bot.git $ cd pleroma-bot/ If you choose to use Git, note that you will also need to install the needed dependecies manually On the other hand, if you use pip or the AUR package, all dependencies will be installed automatically with no manual intervention required Either way, here's a list of the dependencies in case you need them: Name Git repo Docs python-oauthlib GitHub Documentation python-pyaml GitHub Documentation python-requests GitHub Documentation python-requests-oauthlib GitHub Documentation","title":"Installation method"},{"location":"gettingstarted/installation/#test-the-installation","text":"Once installed using your preferred method, test that the package has been correctly installed using the appropiate command. Using PyPi Using AUR package Using Git $ pleroma-bot -h `^y6gB@@BBQA{, :fB@@@@@@BBBBBQgU\" `f@@@@@@@@BBBBQgg80H~ H@@B@BB@BBBB#Qgg&0RNT z@@&B@BBBBBBQgg80RD6HK ;@@@QB@BBBB#Qgg&0RN6WqS q@@@@@BBBBQgg80RN6HAqSo _ _ z@@@@BBBB#Qg8&0RN6WqSUhr | | | | -H@@@@BBBBQQg80RD6HAqSKh( ___| |_ ___ _ __| | __ rB@@@BBBB#6Lm00DN6WqSUhfv / __| __/ _ \\| '__| |/ / f@@@@BBBBf= |0RD6HAqSKhfv \\__ \\ || (_) | | | < =g@@@BBBBF= \"RDN6WqSUhff{ |___/\\__\\___/|_| |_|\\_| c@@@@BBgu_ ~WD9HAqSKhfkl` _6@@@BBNr 'qN6WqSUhhfXI' . . . rB@@@B0r `S6HAqSKhfkoCr ,-. | ,-. ,-. ,-. ,-,-. ,-. |-. ,-. |- `X@@@BQx `I6WASShhfXFIy_ | | | |-' | | | | | | ,-| -- | | | | | _g@@@Q\\` JHAqSKhfXoCwJz_ |-' `' `-' ' `-' ' ' ' `-^ `-' `-' `' rB@@#x` }WASShhfXsIyzuu, | `y@@&| .IAqSKhfXoCwJzu1lr ' `D@&| :KqSUhffXsIyzuu1llc, ff= `==:::\"\"\",,,,________ usage: pleroma-bot [-h] [-c CONFIG] [-d] [-p POLLRATE] [-l LOG] [-n] [--forceDate [FORCEDATE]] [-s] [-a ARCHIVE] [--verbose] [--version] Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon. optional arguments: -h, --help show this help message and exit -c CONFIG, --config CONFIG path of config file (config.yml) to use and parse. If not specified, it will try to find it in the current working directory. -d, --daemon run in daemon mode. By default it will re-run every 60min. You can control this with --pollrate -p POLLRATE, --pollrate POLLRATE only applies to daemon mode. How often to run the program in the background (in minutes). By default is 60min. -l LOG, --log LOG path of log file (error.log) to create. If not specified, it will try to store it at your config file path -n, --noProfile skips Fediverse profile update (no background image, profile image, bio text, etc.) --forceDate [FORCEDATE] forces the tweet retrieval to start from a specific date. The twitter_username value (FORCEDATE) can be supplied to only force it for that particular user in the config -s, --skipChecks skips first run checks -a ARCHIVE, --archive ARCHIVE path of the Twitter archive file (zip) to use for posting tweets. --verbose, -v --version show program's version number and exit $ pleroma-bot -h `^y6gB@@BBQA{, :fB@@@@@@BBBBBQgU\" `f@@@@@@@@BBBBQgg80H~ H@@B@BB@BBBB#Qgg&0RNT z@@&B@BBBBBBQgg80RD6HK ;@@@QB@BBBB#Qgg&0RN6WqS q@@@@@BBBBQgg80RN6HAqSo _ _ z@@@@BBBB#Qg8&0RN6WqSUhr | | | | -H@@@@BBBBQQg80RD6HAqSKh( ___| |_ ___ _ __| | __ rB@@@BBBB#6Lm00DN6WqSUhfv / __| __/ _ \\| '__| |/ / f@@@@BBBBf= |0RD6HAqSKhfv \\__ \\ || (_) | | | < =g@@@BBBBF= \"RDN6WqSUhff{ |___/\\__\\___/|_| |_|\\_| c@@@@BBgu_ ~WD9HAqSKhfkl` _6@@@BBNr 'qN6WqSUhhfXI' . . . rB@@@B0r `S6HAqSKhfkoCr ,-. | ,-. ,-. ,-. ,-,-. ,-. |-. ,-. |- `X@@@BQx `I6WASShhfXFIy_ | | | |-' | | | | | | ,-| -- | | | | | _g@@@Q\\` JHAqSKhfXoCwJz_ |-' `' `-' ' `-' ' ' ' `-^ `-' `-' `' rB@@#x` }WASShhfXsIyzuu, | `y@@&| .IAqSKhfXoCwJzu1lr ' `D@&| :KqSUhffXsIyzuu1llc, ff= `==:::\"\"\",,,,________ usage: pleroma-bot [-h] [-c CONFIG] [-d] [-p POLLRATE] [-l LOG] [-n] [--forceDate [FORCEDATE]] [-s] [-a ARCHIVE] [--verbose] [--version] Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon. optional arguments: -h, --help show this help message and exit -c CONFIG, --config CONFIG path of config file (config.yml) to use and parse. If not specified, it will try to find it in the current working directory. -d, --daemon run in daemon mode. By default it will re-run every 60min. You can control this with --pollrate -p POLLRATE, --pollrate POLLRATE only applies to daemon mode. How often to run the program in the background (in minutes). By default is 60min. -l LOG, --log LOG path of log file (error.log) to create. If not specified, it will try to store it at your config file path -n, --noProfile skips Fediverse profile update (no background image, profile image, bio text, etc.) --forceDate [FORCEDATE] forces the tweet retrieval to start from a specific date. The twitter_username value (FORCEDATE) can be supplied to only force it for that particular user in the config -s, --skipChecks skips first run checks -a ARCHIVE, --archive ARCHIVE path of the Twitter archive file (zip) to use for posting tweets. --verbose, -v --version show program's version number and exit $ python3 -m pleroma_bot.cli -h `^y6gB@@BBQA{, :fB@@@@@@BBBBBQgU\" `f@@@@@@@@BBBBQgg80H~ H@@B@BB@BBBB#Qgg&0RNT z@@&B@BBBBBBQgg80RD6HK ;@@@QB@BBBB#Qgg&0RN6WqS q@@@@@BBBBQgg80RN6HAqSo _ _ z@@@@BBBB#Qg8&0RN6WqSUhr | | | | -H@@@@BBBBQQg80RD6HAqSKh( ___| |_ ___ _ __| | __ rB@@@BBBB#6Lm00DN6WqSUhfv / __| __/ _ \\| '__| |/ / f@@@@BBBBf= |0RD6HAqSKhfv \\__ \\ || (_) | | | < =g@@@BBBBF= \"RDN6WqSUhff{ |___/\\__\\___/|_| |_|\\_| c@@@@BBgu_ ~WD9HAqSKhfkl` _6@@@BBNr 'qN6WqSUhhfXI' . . . rB@@@B0r `S6HAqSKhfkoCr ,-. | ,-. ,-. ,-. ,-,-. ,-. |-. ,-. |- `X@@@BQx `I6WASShhfXFIy_ | | | |-' | | | | | | ,-| -- | | | | | _g@@@Q\\` JHAqSKhfXoCwJz_ |-' `' `-' ' `-' ' ' ' `-^ `-' `-' `' rB@@#x` }WASShhfXsIyzuu, | `y@@&| .IAqSKhfXoCwJzu1lr ' `D@&| :KqSUhffXsIyzuu1llc, ff= `==:::\"\"\",,,,________ usage: cli.py [-h] [-c CONFIG] [-l LOG] [-n] [--forceDate [FORCEDATE]] [-s] [-a ARCHIVE] [--verbose] [--version] Bot for mirroring one or multiple Twitter accounts in Pleroma/Mastodon. optional arguments: -h, --help show this help message and exit -c CONFIG, --config CONFIG path of config file (config.yml) to use and parse. If not specified, it will try to find it in the current working directory. -d, --daemon run in daemon mode. By default it will re-run every 60min. You can control this with --pollrate -p POLLRATE, --pollrate POLLRATE only applies to daemon mode. How often to run the program in the background (in minutes). By default is 60min. -l LOG, --log LOG path of log file (error.log) to create. If not specified, it will try to store it at your config file path -n, --noProfile skips Fediverse profile update (no background image, profile image, bio text, etc.) --forceDate [FORCEDATE] forces the tweet retrieval to start from a specific date. The twitter_username value (FORCEDATE) can be supplied to only force it for that particular user in the config -s, --skipChecks skips first run checks -a ARCHIVE, --archive ARCHIVE path of the Twitter archive file (zip) to use for posting tweets. --verbose, -v --version show program's version number and exit","title":"Test the installation"},{"location":"gettingstarted/usage/","text":"Usage \u00b6 Once you have your config ready, launch pleroma-bot like so: Using PyPi Using AUR package Using Git $ pleroma-bot If using a virtual environment, you'll have to activate before you're able to run it $ source myenv/bin/activate (myenv) $ pleroma-bot $ pleroma-bot $ python3 -m pleroma_bot.cli An error.log file will be created at the path from which pleroma-bot is being called (current working directory). Make sure you have write permissions on it First run \u00b6 When running the bot for the first time it will ask you for the date you wish to start retrieving tweets from. It will gather all tweets from that date up to the present. If you don't input any value and press Enter it will default to the oldest date that Twitter's API allows (' 2010-11-06T00:00:00Z ') for tweet retrieval. To force this behaviour in the future, you can use the --forceDate argument. Be careful, no validation is performed with the already posted toots/posts by that Fediverse account and you can end up with duplicates posts/toots! Additionally, you can provide the twitter_username value if you only want to force the date for that particular user in your config. For example: $ pleroma-bot --forceDate WoolieWoolz Only gather tweets \u00b6 If the --noProfile argument is passed, only tweets will be posted. The profile picture, banner, display name and bio will not be updated on the Fediverse account and will be skipped for all users in the config. Alternatively, you can also choose to use the no_profile mapping on your config , setting it to true on the users you wish to do so: - twitter_username : MyTwitterUser pleroma_username : MyPleromaUser pleroma_base_url : https://fedi.instance pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX no_profile : true # <-- This is useful if for whatever reason (data caps, server bandwidth) you prefer not downloading the profile image, banner, etc. every run. Custom path for log and config \u00b6 Arguments --config and --log can be used to specify a specific path for the configuration file and where the log file should be written to. $ pleroma-bot --config /path/to/config.yml --log /path/to/error.log When these arguments are omitted, config.yml from the current directory will be used as a configuration file and an error.log file will be written to the current working directory. Using an archive \u00b6 A Twitter archive can also be provided with --archive : $ pleroma-bot --archive /path/to/archive.zip This is particularly useful when trying to circumvent Twitter's API limitations, when you need to copy more than 3200 tweets or from an earlier date than 2010-11-06T00:00:00Z . It can also be used as a way of transferring all of your Twitter's account data to a Fediverse instance and making the migration process easier.","title":"Usage"},{"location":"gettingstarted/usage/#usage","text":"Once you have your config ready, launch pleroma-bot like so: Using PyPi Using AUR package Using Git $ pleroma-bot If using a virtual environment, you'll have to activate before you're able to run it $ source myenv/bin/activate (myenv) $ pleroma-bot $ pleroma-bot $ python3 -m pleroma_bot.cli An error.log file will be created at the path from which pleroma-bot is being called (current working directory). Make sure you have write permissions on it","title":"Usage"},{"location":"gettingstarted/usage/#first-run","text":"When running the bot for the first time it will ask you for the date you wish to start retrieving tweets from. It will gather all tweets from that date up to the present. If you don't input any value and press Enter it will default to the oldest date that Twitter's API allows (' 2010-11-06T00:00:00Z ') for tweet retrieval. To force this behaviour in the future, you can use the --forceDate argument. Be careful, no validation is performed with the already posted toots/posts by that Fediverse account and you can end up with duplicates posts/toots! Additionally, you can provide the twitter_username value if you only want to force the date for that particular user in your config. For example: $ pleroma-bot --forceDate WoolieWoolz","title":"First run"},{"location":"gettingstarted/usage/#only-gather-tweets","text":"If the --noProfile argument is passed, only tweets will be posted. The profile picture, banner, display name and bio will not be updated on the Fediverse account and will be skipped for all users in the config. Alternatively, you can also choose to use the no_profile mapping on your config , setting it to true on the users you wish to do so: - twitter_username : MyTwitterUser pleroma_username : MyPleromaUser pleroma_base_url : https://fedi.instance pleroma_token : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX no_profile : true # <-- This is useful if for whatever reason (data caps, server bandwidth) you prefer not downloading the profile image, banner, etc. every run.","title":"Only gather tweets"},{"location":"gettingstarted/usage/#custom-path-for-log-and-config","text":"Arguments --config and --log can be used to specify a specific path for the configuration file and where the log file should be written to. $ pleroma-bot --config /path/to/config.yml --log /path/to/error.log When these arguments are omitted, config.yml from the current directory will be used as a configuration file and an error.log file will be written to the current working directory.","title":"Custom path for log and config"},{"location":"gettingstarted/usage/#using-an-archive","text":"A Twitter archive can also be provided with --archive : $ pleroma-bot --archive /path/to/archive.zip This is particularly useful when trying to circumvent Twitter's API limitations, when you need to copy more than 3200 tweets or from an earlier date than 2010-11-06T00:00:00Z . It can also be used as a way of transferring all of your Twitter's account data to a Fediverse instance and making the migration process easier.","title":"Using an archive"}]}